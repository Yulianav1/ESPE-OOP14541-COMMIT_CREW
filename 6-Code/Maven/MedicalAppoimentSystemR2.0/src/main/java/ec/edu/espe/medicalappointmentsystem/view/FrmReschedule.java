/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ec.edu.espe.medicalappointmentsystem.view;
import ec.edu.espe.medicalappointmentsystem.controller.DoctorController;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.JSeparator;
import com.toedter.calendar.JDateChooser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Date;
import java.util.List;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCursor;
import org.bson.Document;
import org.bson.conversions.Bson;
import ec.edu.espe.medicalappointmentsystem.controller.AppointmentController;
import ec.edu.espe.medicalappointmentsystem.model.Appointment;
import ec.edu.espe.medicalappointmentsystem.model.Doctor;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import com.mongodb.client.result.UpdateResult;
import ec.edu.espe.medicalappointmentsystem.controller.DoctorController;
import javax.swing.DefaultComboBoxModel;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCursor;
import ec.edu.espe.medicalappointmentsystem.controller.RescheduleController;
import ec.edu.espe.medicalappointmentsystem.util.DateValidator;
import org.bson.Document;
import org.bson.conversions.Bson;


/**
 *
 * @author Alexis Viteri DCO-ESPE
 */
public class FrmReschedule extends javax.swing.JFrame {
    private Appointment selectedAppointment; 
    /**
     * Creates new form FrmReagendar
     */
    public FrmReschedule() {
        initComponents();
        loadAppointmentsTable();
        jDateOfExistingAppointment.addPropertyChangeListener(evt -> {
        if ("date".equals(evt.getPropertyName())) {
            loadAppointmentsTable();
        }
    });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jDateOfExistingAppointment = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jDateToRescheduleAppointment = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxSchedule = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jComboBoxSpeciality = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxDoctor = new javax.swing.JComboBox<>();
        jButtonRescheduleAppointment = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAppointments = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(33, 150, 243));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Reagendamiento de cita");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(448, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 70));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Seleccione el dia de la cita a cambiar");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 250, -1));

        jDateOfExistingAppointment.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jDateOfExistingAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 300, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Seleccione la cita:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 280, -1));

        jSeparator2.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator2.setForeground(new java.awt.Color(51, 102, 255));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 800, 10));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Seleccione el dia de la nueva cita");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 250, -1));

        jDateToRescheduleAppointment.setBackground(new java.awt.Color(255, 255, 255));
        jDateToRescheduleAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDateToRescheduleAppointmentMouseClicked(evt);
            }
        });
        jPanel1.add(jDateToRescheduleAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 300, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Seleccione el horario de la nueva cita:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 430, 250, -1));

        jComboBoxSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxScheduleActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxSchedule, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 470, 260, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Especilidad:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, 250, -1));

        jComboBoxSpeciality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Medicina General (no especialidad)", "Cardiología", "Pediatría", "Ginecología" }));
        jComboBoxSpeciality.setToolTipText("");
        jComboBoxSpeciality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSpecialityActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxSpeciality, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Doctor:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 340, 250, -1));

        jComboBoxDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dra. Samantha Villagómez", "Dr. Stalyn Ango", "Dra. Addyson Peralta", "Dra. Luisa Saad Galarza" }));
        jComboBoxDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDoctorActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 380, -1, -1));

        jButtonRescheduleAppointment.setBackground(new java.awt.Color(33, 150, 255));
        jButtonRescheduleAppointment.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonRescheduleAppointment.setForeground(new java.awt.Color(255, 255, 255));
        jButtonRescheduleAppointment.setText("Actualizar Cita");
        jButtonRescheduleAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRescheduleAppointmentActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRescheduleAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 540, 130, 40));

        btnReturn.setBackground(new java.awt.Color(33, 150, 243));
        btnReturn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnReturn.setForeground(new java.awt.Color(255, 255, 255));
        btnReturn.setText("Volver");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });
        jPanel1.add(btnReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 540, 120, 40));

        jTableAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Paciente", "Cedula", "Doctor", "Hora"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAppointments.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableAppointments.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTableAppointments.setGridColor(new java.awt.Color(204, 255, 255));
        jTableAppointments.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTableAppointments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableAppointments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableAppointments.setShowHorizontalLines(true);
        jTableAppointments.setUpdateSelectionOnSort(false);
        jTableAppointments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAppointmentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAppointments);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, 430, 180));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSpecialityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSpecialityActionPerformed
    String selectedSpecialty = (String) jComboBoxSpeciality.getSelectedItem();
    System.out.println("Specialty selected: " + selectedSpecialty); // Depuración
    RescheduleController.updateDoctorComboBox(selectedSpecialty, jComboBoxDoctor, jComboBoxSchedule);
    }//GEN-LAST:event_jComboBoxSpecialityActionPerformed


    private void jComboBoxDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDoctorActionPerformed
     // Obtener el nombre del doctor seleccionado
    String selectedDoctorName = (String) jComboBoxDoctor.getSelectedItem();

    // Crear una instancia de RescheduleController
    RescheduleController rescheduleController = new RescheduleController();

    if (selectedDoctorName != null && !selectedDoctorName.equals("No hay doctores disponibles")) {
        // Actualizar los horarios para el doctor seleccionado usando la instancia
        rescheduleController.updateScheduleForDoctor(selectedDoctorName, jComboBoxSchedule);
    } else {
        // Limpiar los horarios si no hay un doctor seleccionado usando la instancia
        rescheduleController.updateScheduleForDoctor(null, jComboBoxSchedule);
    }
    }//GEN-LAST:event_jComboBoxDoctorActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        FrmMenu frmMenu = new FrmMenu();
            this.setVisible(false);
            frmMenu.setVisible(true);
    }//GEN-LAST:event_btnReturnActionPerformed

    private void jTableAppointmentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAppointmentsMouseClicked
        int row = jTableAppointments.rowAtPoint(evt.getPoint()); // Obtén la fila seleccionada usando el punto del evento
        if (row != -1) {
            DefaultTableModel model = (DefaultTableModel) jTableAppointments.getModel();
            // Obtén los datos de la fila seleccionada
            String patientName = (String) model.getValueAt(row, 0);
            String patientId = (String) model.getValueAt(row, 1);
            String doctorName = (String) model.getValueAt(row, 2);
            String timeSlot = (String) model.getValueAt(row, 3);

            // Aquí deberías buscar la cita correspondiente en tu lista de citas
            for (Appointment appointment : AppointmentController.loadAppointments()) {
                if (appointment.getPatient().getName().equals(patientName) &&
                    appointment.getPatient().getId().equals(patientId) &&
                    appointment.getDoctor().getName().equals(doctorName) &&
                    appointment.getTimeSlot().equals(timeSlot)) {
                    selectedAppointment = appointment;
                    System.out.println("Cita seleccionada: " + selectedAppointment); // Depuración
                    break;
                }
            }
        }
    }//GEN-LAST:event_jTableAppointmentsMouseClicked

    private void jButtonRescheduleAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRescheduleAppointmentActionPerformed

    Date newDate = jDateToRescheduleAppointment.getDate();
    String newTime = (String) jComboBoxSchedule.getSelectedItem();
    String newDoctor = (String) jComboBoxDoctor.getSelectedItem();
    String newSpecialty= (String) jComboBoxSpeciality.getSelectedItem();
    verifyDate();
    if (selectedAppointment != null) {
    RescheduleController rescheduleController = new RescheduleController();
    boolean result = rescheduleController.rescheduleAppointment(selectedAppointment, newDate, newTime, newDoctor,newSpecialty);

    if (result) {
        JOptionPane.showMessageDialog(this, "Cita actualizada con éxito.");
        loadAppointmentsTable(); 
    } else {
        JOptionPane.showMessageDialog(this, "Error al actualizar la cita.", "Error", JOptionPane.ERROR_MESSAGE); }
    }else {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una cita para actualizar.", "Error", JOptionPane.ERROR_MESSAGE);
    } 
    }//GEN-LAST:event_jButtonRescheduleAppointmentActionPerformed

    private void jComboBoxScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxScheduleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxScheduleActionPerformed

    private void jDateToRescheduleAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDateToRescheduleAppointmentMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateToRescheduleAppointmentMouseClicked
private void verifyDate() {
    Date selectedDate = jDateToRescheduleAppointment.getDate();
    if (selectedDate == null) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una nueva fecha.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Verifica si la fecha es posterior a la fecha actual
    if (DateValidator.isDateAfterToday(selectedDate)) {
        System.out.println("veamos si por aqui pasa");
    } else {
        JOptionPane.showMessageDialog(this, "La fecha de la nueva cita debe ser posterior a la fecha actual.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void loadAppointmentsTable() {
    DefaultTableModel model = (DefaultTableModel) jTableAppointments.getModel();
    model.setRowCount(0);

    Date selectedDate = jDateOfExistingAppointment.getDate();
    if (selectedDate != null) {
        
        List<Appointment> appointments = AppointmentController.loadAppointments();
        for (Appointment appointment : appointments) {
            
            if (appointment.getDateAppointment().equals(selectedDate)) {
                model.addRow(new Object[]{
                    appointment.getPatient().getName(),
                    appointment.getPatient().getId(),
                    appointment.getDoctor().getName(),
                    appointment.getTimeSlot()
                });
            }
        }
    } else {
        System.out.println("ante la duda");
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmReschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmReschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmReschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmReschedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmReschedule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton jButtonRescheduleAppointment;
    private javax.swing.JComboBox<String> jComboBoxDoctor;
    private javax.swing.JComboBox<String> jComboBoxSchedule;
    private javax.swing.JComboBox<String> jComboBoxSpeciality;
    private com.toedter.calendar.JDateChooser jDateOfExistingAppointment;
    private com.toedter.calendar.JDateChooser jDateToRescheduleAppointment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTableAppointments;
    // End of variables declaration//GEN-END:variables
}
